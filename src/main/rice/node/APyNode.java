package main.rice.node;
import main.rice.obj.APyObj;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
// TODO: implement the abstract APyNode class here
/**
 * An abstract class whose instances represent templates for creating Python objects. Each
 * APyNode is a generator for a type of APyObj. For instance, a PyIntNode generates
 * PyIntObjs. If this node represents a compound type, e.g. a list, it will hold
 * references to its child node(s).
 *
 * @param <ObjType> the type of Python object generated by this tree
 */
public abstract class APyNode<ObjType extends APyObj>{
    /**
     * a List of Number objects that will contain the exhaustive domain
     */
    private List<Number> exDomainList;
    /**
     * a List of Number objects that will contain the ramdom domain
     */
    private List<Number> randDomainList;

    /**
     * Returns the left child; returns null if no left child exists
     * @return the left child node
     */
    public APyNode<?> getLeftChild(){
        return null;
    }

    /**
     * Returns the right child; returns null if no right child exists
     * @return the right child node
     */
    public APyNode<?> getRightChild(){
        return null;
    }

    /**
     * Sets the exhaustive domain to the input list of numbers.
     * @param exDomain
     */
    public void setExDomain(List<? extends Number> exDomain){
        this.exDomainList = new ArrayList<>();
        for (Object num: exDomain){
            this.exDomainList.add((Number) num);
        }

    }
    /**
     *Returns the exhaustive domain; returns null if it has not been set yet.
     */
    public List<? extends Number> getExDomain(){
        if (this.exDomainList != null){
            return this.exDomainList;
        }
        return null;
    }
    /**
     * Sets the random domain to the input list of numbers.
     * @param ranDomain
     */
    public void setRanDomain(List<? extends Number> ranDomain){
        this.randDomainList = new ArrayList<>();
        for (Object num: ranDomain){
            this.randDomainList.add((Number)num);
        }
    }
    /**
     *
     * @return the random domain; returns null if it has not been set yet.
     */
    public List<? extends Number> getRanDomain(){
        if (this.randDomainList != null){
            return this.randDomainList;
        }
        return null;
    }

    /**
     * Generates and returns all valid Python objects of type ObjType within the exhaustive domain.
     * @return all valid Python objects of type ObjType within the exhaustive domain
     */
    public abstract Set<ObjType> genExVals();

    /**
     * Generates and returns one valid Python object of type ObjType, selected from the random domain.
     * @return one valid Python object of type ObjType, selected from the random domain.
     */
    public abstract ObjType genRandVal();






}